var bgVbo;var bgProgram;var bgMvp;var BG_SIZE=512;function bgInit(){var b=new Float32Array([0,0,0,0,BG_SIZE,0,1,0,0,BG_SIZE,0,1,BG_SIZE,BG_SIZE,1,1,]);bgVbo=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,bgVbo);gl.bufferData(gl.ARRAY_BUFFER,b,gl.STATIC_DRAW);bgProgram=new esProgram(gl);bgProgram.addShaderId("bg-fs",ES_FRAGMENT);bgProgram.addShaderId("bg-vs",ES_VERTEX);bgProgram.link();bgProgram.use();var a=bgProgram.getUniform("mvp");var c=bgProgram.getUniform("tex");bgMvp=esMat4_create();esMat4_ortho(bgMvp,0,512,640,0);gl.uniformMatrix4fv(a,false,bgMvp);gl.uniform1i(c,0)}function bgRender(){bgProgram.use();gl.bindTexture(gl.TEXTURE_2D,texBg);gl.enableVertexAttribArray(0);gl.bindBuffer(gl.ARRAY_BUFFER,bgVbo);gl.vertexAttribPointer(0,4,gl.FLOAT,false,0,0);gl.drawArrays(gl.TRIANGLE_STRIP,0,4);gl.disableVertexAttribArray(0)}var spriteList;var spriteCount;var spriteVbo;var spriteProgram;var SPRITE_MAX=100;var SPRITE_COMPS=5;var SPRITE_COMPS_SIZE=SPRITE_COMPS*4;var SPRITE_DIM=16;var SP_NODE=[0,0];function spriteInit(){spriteCount=0;spriteList=new Float32Array(SPRITE_MAX*SPRITE_COMPS);spriteList[0]=0.5;spriteVbo=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,spriteVbo);gl.bufferData(gl.ARRAY_BUFFER,spriteList,gl.DYNAMIC_DRAW);spriteProgram=new esProgram(gl);spriteProgram.addShaderId("sprite-fs",ES_FRAGMENT);spriteProgram.addShaderId("sprite-vs",ES_VERTEX);spriteProgram.bindAttribute(0,"pos");spriteProgram.bindAttribute(1,"uv");spriteProgram.bindAttribute(2,"size");spriteProgram.link();spriteProgram.use();var b=spriteProgram.getUniform("tex");var a=spriteProgram.getUniform("mvp");gl.uniform1i(b,0);gl.uniformMatrix4fv(a,false,bgMvp)}function spriteAdd(a,e,c,b){if(spriteCount>=SPRITE_MAX){return}var d=SPRITE_COMPS*spriteCount;spriteList[d+0]=a;spriteList[d+1]=e;spriteList[d+2]=b[0];spriteList[d+3]=b[1];spriteList[d+4]=c;spriteCount++}function spriteFlush(){if(spriteCount<=0){return}gl.bindBuffer(gl.ARRAY_BUFFER,spriteVbo);gl.bufferSubData(gl.ARRAY_BUFFER,0,spriteList.subarray(0,spriteCount*SPRITE_COMPS));spriteProgram.use();gl.bindTexture(gl.TEXTURE_2D,texSprites);gl.enableVertexAttribArray(0);gl.enableVertexAttribArray(1);gl.enableVertexAttribArray(2);gl.vertexAttribPointer(0,2,gl.FLOAT,false,SPRITE_COMPS_SIZE,0);gl.vertexAttribPointer(1,2,gl.FLOAT,false,SPRITE_COMPS_SIZE,8);gl.vertexAttribPointer(2,1,gl.FLOAT,false,SPRITE_COMPS_SIZE,16);gl.drawArrays(gl.POINTS,0,spriteCount);gl.disableVertexAttribArray(0);gl.disableVertexAttribArray(1);gl.disableVertexAttribArray(2);spriteCount=0}var nodeList;function nodeInit(){nodeList=[];var a=packNode(67,49);var g=packNode(215,53);var f=packNode(62,161);var e=packNode(218,153);var d=packNode(293,148);var c=packNode(346,150);var b=packNode(293,86);a.linkWest(a);a.linkSouth(f);f.linkWest(e);g.linkSouth(e)}function nodeRender(){for(var a=0;a<nodeList.length;a++){nodeList[a].render()}}function packNode(a,c){var b=new Node(a,c);nodeList.push(b);return b}function Node(a,b){this.x=a;this.y=b;this.east=this.west=this.north=this.south=null}Node.prototype.render=function(){spriteAdd(this.x,this.y,16,SP_NODE)};Node.prototype.linkWest=function(a){this.west=a;a.east=this};Node.prototype.linkSouth=function(a){this.south=a;a.north=this};var gl;var imgBg;var imgSprites;var frameFunc;var texBg;var texSprites;function frameExec(a){if(frameFunc!=null){frameFunc(a)}spriteFlush()}function makeTexture(b){var a=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,a);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,b);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);assert(a!=null,a);return a}function loaded(){bgInit();spriteInit();nodeInit();texBg=makeTexture(imgBg);texSprites=makeTexture(imgSprites);frameFunc=playFrame;esNextFrame(frameExec)}function main(){frameFunc=null;gl=esInitGl("can");gl.clearColor(0,0,0,1);gl.clear(gl.COLOR_BUFFER_BIT);var a=new esLoad();imgBg=a.loadImage("bg.png");imgSprites=a.loadImage("sprites.png");a.download(loaded)}function assert(a,b){if(!a){alert(b);throw new Error(a,b)}}function playFrame(a){gl.clear(gl.COLOR_BUFFER_BIT);bgRender();nodeRender()};